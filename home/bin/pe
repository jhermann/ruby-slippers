#! /bin/bash
#
# "gedit" wrapper
#

shopt -s extglob
outer_python=$(command which python)
max_find_files=25


fail() { # fail with error message on stderr and exit code 1
    echo >&2 "ERROR:" "$@"
    exit 1
}

editor() {
    case $(lsb_release -cs) in
        trusty|utopic|vivid|wily|xenial)
            gedit "$@" >>/tmp/gedit-$USER.log 2>&1 &
            disown
            ;;
        precise|lucid|*)
            gedit --background "$@"
            ;;
    esac
}

py_file() {
    local spec="$1"
    local file="$spec"
    local maxdepth=0
    case "$spec" in
        *'.**') file=${file%???}; maxdepth=99 ;;
        *'.*')  file=${file%??};  maxdepth=1  ;;
    esac
    file="$($outer_python -c "import ${file}; print(${file}.__file__)")"
    file="${file/.pyc/.py}"
    file="${file/.pyo/.py}"
    test -n "$file" || fail "Cannot locate python module for '${spec}'!"
    if test "$maxdepth" -gt 0; then
        IFS=$'\n'
        files+=( $(find "$(dirname "$file")" -maxdepth $maxdepth -type f -name '*.py' | sort | head -n $max_find_files) )
        unset IFS
    else
        files+=("$file")
    fi
}

# Clean environment for built-in interpreter
deactivate 2>/dev/null || :
export PYTHONPATH=

# Put system binaries upfront
export PATH=/usr/bin:$PATH

# Look out for grep results (containing a ':') and load file at the matching line
args=()
files=()
for arg in "$@"; do
    case "$arg" in
        -*)
            # copy over any option
            args+=("$arg")
            ;;
        ^*)
            # magic open (auto-detect and lookup filename)
            if test -f setup.py; then
                py_file "${arg#?}"
            else
                fail "Cannot detect any way to open '${arg#?}'!"
            fi
            ;;
        py^*)
            # open Python module
            py_file "${arg#py?}"
            ;;
        ?*~*)
            # open file at first regex match (file~pattern)
            match=$(grep -nim1 -E -e "${arg#*~}" "${arg%%~*}")
            test -n "$match" && files+=("${arg%%~*}:${match%%:*}") || files+=("${arg%%~*}")
            ;;
        *)
            # open some file or directory
            if test -d "$arg"; then
                IFS=$'\n'
                files+=( $(findall "$arg" -type f | sort | head -n $max_find_files) )
                unset IFS
            else
                files+=("$arg")
            fi
            ;;
    esac
done

# If called with no files in a git repo, open working set
# Inspired by http://blog.amjith.com/git-open-a-small-git-hack
binary_files_re='\.(png|jpg|ico)$'
if test ${#files[@]} -eq 0 ; then
    if git rev-parse --show-toplevel >/dev/null 2>&1 ; then
        readarray -t files < <(git status --porcelain -uno | cut -b4- | egrep -v "$binary_files_re")
        #echo ${#files[@]} ${files[@]}
        if test ${#files[@]} -eq 0 ; then
            readarray -t files < <(git show --pretty="format:" --name-only HEAD | egrep -v "$binary_files_re")
            #echo ${#files[@]} ${files[@]}
        fi
    fi
fi

test ${#files[@]} -gt 0 || { editor; exit $?; }

# Open files
for filename in "${files[@]}"; do
    line=""
    test "${filename%%:*}" = "$filename" || line=+$(cut -f2 -d: <<<"$filename")
    filename="${filename%%:*}"
    if [[ "$filename" == [ab]/* ]]; then
        # treat "git diff" pasted filenames special
        test -d "${filename:0:1}" || filename="${filename:2}"
    fi

    editor "${args[@]}" "$filename" $line
done

# Bring window to front
if which wmctrl >/dev/null; then
    test "$(dirname $filename)" != '.' || filename="$(pwd)/$filename"
    title_re="^[^ ]+ +[^ ]+ +[^ ]+ +$(basename $filename).*/$(basename $(dirname $filename)). - gedit\$"
    for i in seq 10; do
        wid=$(wmctrl -l | egrep "$title_re" | tail -n1 | cut -f1 -d' ')
        test -n "$wid" && wmctrl -i -a "$wid" && break || sleep .1
    done
fi
