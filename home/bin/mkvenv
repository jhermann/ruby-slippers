#! /bin/bash
#
# SYNOPSIS
#
#   mkvenv
#       Create local ".venv/‹basename›" if script is copied
#       into workdir or called from within workdir
#
#   mkvenv ~name
#       Create named venv in ~/.local/virtualenvs
#
#   mkvenv /path/to/python …
#       Use a specific Python interpreter (1st arg is an executable)
#
# Make a Python virtualenv with a know version of "virtualenv", so
# we don't have to worry about unsupported options, and age-old versions
#
# If the first argument is an executable, use that as the Python interpreter.
#
# If the last argument is like "~name", then create the virtualenv in "~/.pyvenv/<name>".
#
# If used as a bootstrap script in a project, the virtualenv is placed
# in "./.pyvenv/<name>", with "<name>" being the basename of the project
# workdir, and any requirement files are passed on to pip in that virtualenv.
#
set -e
#set -x
basedir=$(command cd >/dev/null $(dirname $(readlink -f "$0" || echo "$0")) && pwd)
venv_basedir="$HOME/.local/virtualenvs"  # venv default base directory
virtualenv_version=15.1.0  # virtualenv version to use
virtualenv_install_dir="$venv_basedir/.virtualenv"
pypi_url="${PYPI_URL:-https://pypi.python.org}"

# If started as bootstrap script in a project, or if being in a workdir, create local virtualenv
in_project=false
if test -f "setup.py" -o -f "setup.cfg"; then
    basedir="$PWD"
fi
if test -f "$basedir/setup.py" -o -f "$basedir/setup.cfg"; then
    venvdir="$basedir/.venv/$(basename "$basedir")"
    command cd "$basedir"
    in_project=true
fi

test -z "$(type -t deactivate)" || deactivate

# Download virtualenv tool if missing
if test ! -f "$venv_basedir/.complete"; then
    mkdir -p "$virtualenv_install_dir"
    rm -rf "$virtualenv_install_dir"
    if test ! -f "$venv_basedir/.virtualenv-$virtualenv_version.tar.gz"; then
        echo "*** Downloading virtualenv-$virtualenv_version.tar.gz"
        if pip install --log "$venv_basedir/.virtualenv.log" -d "$venv_basedir" --no-binary :all: virtualenv==$virtualenv_version 2>/dev/null; then
            echo "*** Downloaded virtualenv-$virtualenv_version.tar.gz using pip"
        else
            ( command cd "$venv_basedir" && curl -sOkS "$pypi_url/packages/source/v/virtualenv/virtualenv-$virtualenv_version.tar.gz" )
        fi
        mv "$venv_basedir/virtualenv-$virtualenv_version.tar.gz" "$venv_basedir/.virtualenv-$virtualenv_version.tar.gz"
    fi
    ( command cd "$venv_basedir" && tar xfz .virtualenv-$virtualenv_version.tar.gz && mv virtualenv-$virtualenv_version .virtualenv )
    echo "$virtualenv_version" >"$venv_basedir/.complete"
fi

# Find proper Python executable; if first arg is executable, use that as the interpreter
python=python
orig_python=$(cat $(dirname $(dirname $(which python)))/lib/python*/orig-prefix.txt 2>/dev/null || :)
test -z "$orig_python" || python="$orig_python/bin/python"
if test -f "$1" -a -x "$1"; then
    python="$1"
    shift
fi

# If last argument is like "~name", then create the virtualenv in "~/.local/virtualenvs/<name>"
argv=( "$@" )
if test $# -gt 0; then
    if test "${argv[-1]:0:1}" = "~" -a "${argv[-1]//\//}" = "${argv[-1]}" -a -n "${argv[-1]:1}" ; then
        venvdir="$venv_basedir/${argv[-1]:1}"
        argv=( "${argv[@]:0:$((${#argv[@]}-1))}" )
    fi
fi
##echo "${argv[-1]}" / "${argv[@]}" / $venvdir

# Create the virtualenv
echo "Using interpreter '$python'"
$python "$virtualenv_install_dir/virtualenv.py" "${argv[@]}" $venvdir

# Try to find the created virtualenv from arguments, if not pre-determined
if test -z "$venvdir" ; then
    venvdir="."
    for arg in "${argv[@]}"; do
        if test -d "$arg/bin" -a -r "$arg/bin/activate"; then
            venvdir=$(command cd >/dev/null "$arg" && pwd)
            break
        fi
    done
fi

# Update basic install machinery
echo "Updating pip..."
"$venvdir/bin/pip" -q install -U "pip"
echo "Updating setuptools..."
"$venvdir/bin/pip" -q install -U  "setuptools>=14.3" >/dev/null 2>&1 || :
for req in "wheel"; do
    echo "Updating $req..."
    "$venvdir/bin/pip" -q install -U "$req" || :
done
"$venvdir/bin/pip" uninstall --yes "distribute" >/dev/null 2>&1 || :

# Auto-install any requirements
if $in_project; then
    for deps in requirements.txt requires.txt *-requirements.txt requirements-*.txt; do
        deps="$basedir/$deps"
        test -r "$deps" || continue
        grep "^# mkvenv: no-deps" "$deps" >/dev/null && continue || :
        ( command cd "$venvdir" \
            && "$venvdir/bin/pip" install -r "$deps" -i "$pypi_url/simple/" \
                                          --build "pip-build" --cache-dir "$basedir/.pip-cache" \
            || echo >&2 "WARNING: pip failed with RC=$?" )
    done
    if ! grep "^# mkvenv: no-deps" "$basedir/setup.py" >/dev/null; then
        "$venvdir/bin/python" "$basedir/setup.py" develop -U -i "$pypi_url/simple/"
    fi

    # Create autoenv script
    if test ! -f "$basedir/.env"; then
        echo >"$basedir/.env" \
             "test ! -f \"${venvdir#$basedir/}/bin/activate\"" \
             "|| . \"${venvdir#$basedir/}/bin/activate\""
    fi
fi

# Report activation instructions
if test "$(which python 2>/dev/null)" != "$venvdir/bin/python" ; then
    echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
    echo "Please call the following command to activate this virtualenv..."
    echo "." $(command cd >/dev/null "$venvdir/bin" && pwd)"/activate"
    test ! -f "$basedir/.env" || echo -e "\nOr use the provided autoenv script (.env)."
    echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
fi
