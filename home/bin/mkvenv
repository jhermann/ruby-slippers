#! /bin/bash
#
# Make a Python virtualenv with a know version of "virtualenv", so
# we don't have to worry about unsupported options, and age-old versions
#
# If the first argument is an executable, use that as the Python interpreter.
#
# If the last argument is like "~name", then create the virtualenv in "~/.pyvenv/<name>".
#
# If used as a bootstrap script in a project, the virtualenv is placed
# in "./.pyvenv/<name>", with "<name>" being the basename of the project
# workdir, and any requirement files are passed on to pip in that virtualenv.
#
set -e
#set -x
basedir=$(cd $(dirname $(readlink -f "$0" || echo "$0")) && pwd)
venv_version=1.9.1 # virtualenv version to use
venv_basedir="$HOME/.pyvenv" # venv default base directory
virtualenv="$venv_basedir/.virtualenv"
pypi_url="${PYPI_URL:-https://pypi.python.org}"

# If started as bootstrap script in a project, create local virtualenv
in_project=false
if test -f "$basedir/setup.py" -o -f "$basedir/setup.cfg"; then
    venvdir="$basedir/.pyvenv/$(basename "$basedir")"
    cd "$basedir"
    in_project=true
fi

# Download virtualenv tool if missing
if test ! -f "$venv_basedir/.complete"; then
    mkdir -p "$virtualenv"
    rm -rf "$virtualenv"
    if test ! -f "$venv_basedir/.virtualenv-$venv_version.tar.gz"; then
        echo "*** Downloading virtualenv-$venv_version.tar.gz"
        if pip install --log "$venv_basedir/.virtualenv.log" -d "$venv_basedir" virtualenv==$venv_version; then
            echo "*** Downloaded virtualenv-$venv_version.tar.gz using pip"
        else
            ( cd "$venv_basedir" && curl -sOkS "$pypi_url/packages/source/v/virtualenv/virtualenv-$venv_version.tar.gz" )
        fi
        mv "$venv_basedir/virtualenv-$venv_version.tar.gz" "$venv_basedir/.virtualenv-$venv_version.tar.gz"
    fi
    ( cd "$venv_basedir" && tar xfz .virtualenv-$venv_version.tar.gz && mv virtualenv-$venv_version .virtualenv )
    echo "$venv_version" >"$venv_basedir/.complete"
fi

# Find proper Python executable; if first arg is executable, use that as the interpreter
python=python
orig_python=$(cat $(dirname $(dirname $(which python)))/lib/python*/orig-prefix.txt 2>/dev/null || :)
test -z "$orig_python" || python="$orig_python/bin/python"
if test -f "$1" -a -x "$1"; then
    python="$1"
    shift
fi

# If last argument is like "~name", then create the virtualenv in "~/.pyvenv/<name>"
argv=( "$@" )
if test $# -gt 0; then
    if test "${argv[-1]:0:1}" = "~" -a "${argv[-1]//\//}" = "${argv[-1]}" -a -n "${argv[-1]:1}" ; then
        venvdir="$venv_basedir/${argv[-1]:1}"
        argv=( "${argv[@]:0:$((${#argv[@]}-1))}" )
    fi
fi
##echo "${argv[-1]}" / "${argv[@]}" / $venvdir

# Create the virtualenv
echo "Using interpreter '$python'"
$python "$virtualenv/virtualenv.py" "${argv[@]}" $venvdir

# Try to find the created virtualenv from arguments, if not pre-determined
if test -z "$venvdir" ; then
    venvdir="."
    for arg in "${argv[@]}"; do
        if test -d "$arg/bin" -a -r "$arg/bin/activate"; then
            venvdir=$(cd "$arg" && pwd)
            break
        fi
    done
fi

# Auto-install any requirements
if $in_project; then
    for deps in requirements.txt requires.txt *-requirements.txt requirements-*.txt; do
        deps="$PWD/$deps"
        test -r "$deps" && ( cd "$venvdir" && "./bin/pip" install -r "$deps" \
            -i "$pypi_url/simple/" --build "pip-build" --download-cache "pip-cache" )
    done
    "$venvdir/bin/python" "$basedir/setup.py" develop -U -i "$pypi_url/simple/"
fi

# Report activation instructions
echo >"$venvdir/.env" "test ! -f bin/activate || . bin/activate"
if test "$(which python 2>/dev/null)" != "$venvdir/bin/python" ; then
    echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
    echo "Please call the following command to activate this virtualenv..."
    echo "." $(cd "$venvdir/bin" && pwd)"/activate"
    echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
fi
